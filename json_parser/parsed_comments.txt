   [relu/MAC]{'op': 'tvm_op', 'name': 'tvmgen_default_fused_nn_dense_nn_relu', 'attrs': {'num_outputs': '1', 'num_inputs': '2', 'flatten_data': '0', 'func_name': 'tvmgen_default_fused_nn_dense_nn_relu', 'hash': '4b43bf2e7e3f9ba9'}, 'inputs': [[1, 0, 0], [2, 0, 0]]}
       [read] 1, 2
E:          load vector: a0, 1[0:100]            # save each part of vector in register
E:          load vector: a1, 1[100:200]
E:          load vector: a2, 1[200:300]
E:          load vector: a3, 1[300:400]
E:          load vector: a4, 1[400:500]
E:          load vector: a5, 1[500:600]
E:          load vector: a6, 1[600:700]
E:          load vector: a7, 1[700:784]
       [MAC] [1, 784] x [300, 784]
            Accumulate register: a8              # define where each sub dot product shouls sum too
P:         [1, 784] . [300, 784][0]              # first row of matrix
E:              load vector: a9, 2[0:100]        # load the first part of first row. equal
                                                 # same size and location in original vector
P:              MAC: a9, a9, a0                  # conduct small dot product
E:              add: a8, a8, a9                  # add small dot product to row
E:              load vector: a9, 2[100:200]      # prociede to next batch
P:              MAC: a9, a9, a1
E:              add: a8, a8, a9
E:              load vector: a9, 2[200:300]
P:              MAC: a9, a9, a2
E:              add: a8, a8, a9
E:              load vector: a9, 2[300:400]
P:              MAC: a9, a9, a3
E:              add: a8, a8, a9
E:              load vector: a9, 2[400:500]
P:              MAC: a9, a9, a4
E:              add: a8, a8, a9
E:              load vector: a9, 2[500:600]
P:              MAC: a9, a9, a5
E:              add: a8, a8, a9
E:              load vector: a9, 2[600:700]
P:              MAC: a9, a9, a6
E:              add: a8, a8, a9
E:              load vector: a9, 2[700:784]
P:              MAC: a9, a9, a7
E:              add: a8, a8, a9
E:              save:[1, 784][0], a8
P:         [1, 784] . [300, 784][1]              # load to first position of resulting vector

                                                 # repeat for height of matrix
